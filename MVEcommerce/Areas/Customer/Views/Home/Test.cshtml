<script src="~/lib/editor/ckfinder/ckfinder.js"></script>
<script src="~/lib/editor/ckeditor/ckeditor.js"></script>

<textarea id="editor" class="form-control"></textarea>

@section Scripts {
    <script>
        tinymce.init({
            selector: '#editor',

            plugins: [
                // Core editing features
                'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
                // Your account includes a free trial of TinyMCE premium features
                // Try the most popular premium features until Nov 28, 2024:
                'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'advtemplate', 'ai', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown',
                // Early access to document converters
                'importword', 'exportword', 'exportpdf'
            ],
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
            tinycomments_mode: 'embedded',
            tinycomments_author: 'Author name',
            mergetags_list: [
                { value: 'First.Name', title: 'First Name' },
                { value: 'Email', title: 'Email' },
            ],
            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
            exportpdf_converter_options: { 'format': 'Letter', 'margin_top': '1in', 'margin_right': '1in', 'margin_bottom': '1in', 'margin_left': '1in' },
            exportword_converter_options: { 'document': { 'size': 'Letter' } },
            importword_converter_options: { 'formatting': { 'styles': 'inline', 'resets': 'inline', 'defaults': 'inline', } },

            // enable title field in the Image dialog
            image_title: true,
            // enable automatic uploads of images represented by blob or data URIs
            automatic_uploads: true,
            // add custom filepicker only to Image dialog
            file_picker_types: 'image',
            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                input.onchange = function () {
                    var file = this.files[0];
                    var formData = new FormData();
                    formData.append('file', file);

                    // Thay đổi URL này thành URL của API upload file của bạn
                    var uploadUrl = '/api/upload';

                    fetch(uploadUrl, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        // Giả sử API trả về URL của file đã upload
                        var fileUrl = data.url;
                        cb(fileUrl, { title: file.name });
                    })
                    .catch(error => {
                        console.error('Error uploading file:', error);
                    });
                };

                input.click();
            },

            setup: function (editor) {
                editor.on('remove', function (e) {
                    var src = e.target.src;
                    if (src) {
                        // Thay đổi URL này thành URL của API xóa file của bạn
                        var deleteUrl = '/api/delete';

                        fetch(deleteUrl, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ url: src })
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log('File deleted:', data);
                        })
                        .catch(error => {
                            console.error('Error deleting file:', error);
                        });
                    }
                });
            }
        });
    </script>
}